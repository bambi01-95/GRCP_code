(define list (lambda x x))

;; string
    ;; (string 123)
    ;; (string 1.23)
    ;; (string "abc")
    ;; (string 'abc)
    ;; (println 'hahahaha)
    ;; (string (list 123 "abc" 456 "efd"))
;; nthset
    ;; (set-nth "abde" 2 65);;d->A
    ;; (set-nth 'abde 2 65) ;;d->A
    ;; (set-nth (list 1 2 3 4) 2 (list 1 1 1))
    ;; (set-nth (list 1 2 3 4) 2 123)
    ;; (set-nth (list 1 2 3 4) 2 )

    ;; (set-nth "abde" 10 65);;d->A
    ;; (set-nth 'abde 10 65) ;;d->A
    ;; (set-nth (list 1 2 3 4) 12 (list 1 1 1))
    ;; (set-nth (list 1 2 3 4) 12 123)
    ;; (set-nth (list 1 2 3 4) 12 )

;; nth
;; string: abc
;; index : 012
    ;; (nth (list 1 2 3) 1)
    ;; (nth "123" 1)
    ;; (nth 'abc 1)


;; length
    ;; (length (list 1 2 3 4))
    ;; (length "1234")
    ;; (length 'abcd)

;;/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
;;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
;; slice
    ;; (define c (list 1 2 3 4 5 6 7))
    ;;             ;;  0 1 2 3 4 5 6
    ;;             ;;  7 6 5 4 3 2 1
    (define a "1234567")
    ;; (println '--------)
    ;; (slice c 2 5 1) ;;(3 4 5)
    (slice a 2 6 2) ;;3 4 5
    ;; (println '-----)
    ;; c
    ;; a
    ;; (slice c 5 2) ;;(3 4 5)
    (slice a 6 2 2) ;;3 4 5
    ;; (println '-----)
    ;; c
    ;; a
    ;; (slice c 1 (- 1)) ;;(2 3 4 5 6)
    (slice a 1 (- 1) 2) ;;23456
    ;; (slice c (- 1) 1)
    ;; (slice a (- 1) 1)




;; concat
    ;; (concat (list 1 2 3) (list 4 5 6))
    ;; (concat "str" "ing")
    ;; (concat 'sym 'bol)

;;////////////////////////////////////

;; string 
    ;; (string )
    ;; (string 123)
    ;; (string 123.123)
    ;; (string 'symbol)
    ;; (string (list 1 2 3 4))
    ;; (string "string")

;; symbol
    ;; (symbol "asdf asdf")
    ;; (symbol "123")
    ;; (symbol "sdfd")
    ;; (symbol 'error)
;; float
    ;; (float 123)
    ;; (float "123")
    ;; (float "123.123")
    ;; (float "123.12ad")

;; integer
    ;; (integer 123.123)
    ;; (integer "12.31.2")
    ;; (integer "12.asd")

;; istype
    ;; (list? (list 1 2 3))
    ;; (list? 1)

    ;; (integer? 1)
    ;; (integer? 'a)

    ;; (float? 1.1)
    ;; (float? 'a)

    ;; (string? "123")
    ;; (string? 123)

    ;; (symbol? 'asd)
    ;; (symbol? 123)

;; Float and Double
    ;; 1234
    ;; 12.34
    ;; 1.
    ;; .1

    ;; (+)
    ;; (+ 1)
    ;; (+ 1.1 1 1)

    ;; (-)
    ;; (- 1)
    ;; (- 1.1 1 1)

    ;; (/)
    ;; (/ 1)
    ;; (/ 1.1 1 1)

    ;; (*)
    ;; (* 1)
    ;; (* 1.1 1 1)

;; Primitives eval and apply
    ;; (define f (lambda (x y) (eval y)))
    ;; (f 41 '(+ x 1))
    ;; (apply * '(6 7))

;; gomi
    ;; (define tarai (lambda (x y z)
    ;; (if (< y x) (tarai
    ;; (tarai (- x 1) y z)
    ;; (tarai (- y 1) z x)
    ;; (tarai (- z 1) x y)
    ;; ) y ) )
    ;; )
    ;; (tarai 24 12 6)

    stop

;; quasiquote and unquote
    ;; (quasiquote (1 (+ 2 3) (unquote (+ 4 5)) (+ 6 7)))
    ;; `foo                            
    ;; ,foo                            
    ;; `(1 (+ 2 3) ,(+ 4 5) (+ 6 7))	;;=> (1 (+ 2 3) 9 (+ 6 7))
    ;; (list 2 3 4)				    ;;=> (2 3 4)
    ;; `(1 (unquote (list 2 3 4)) 5)		    ;;=> (1 (2 3 4) 5)
    ;; `(1 (unquote-splicing (list 2 3 4)) 5)	;;=> (1 2 3 4 5)