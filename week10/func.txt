;; note: this is a memo used for list.txt


(define a 10)
(define b 11)
(define c 12)

(define cadr (lambda (obj)
        (car (cdr obj))
    )
)

;(define adad (list '1 '2 '3 '4))
;(println (cadr adad))

(print 'pairlist)
(define pairlist (lambda (name value tail)
        (if (cell? names)
            (cons (cons (car names) (car value)) (pairlist (cdr names) (cdr values) tail))
            tail
        )
    )
)

(print 'evlist)
(define evlist (lambda (list)
        (if (cell? list)
        (cons (eval (car list)) (evlist (cdr list)))
        (eval list)
        )
    )
)

(print 'apply)
(define apply (lambda (args)
        (if (integer? (car args))
            (println 'ApplyIntegerError)

            (if (symbol? (car args))
                (if (eq? (car args) '+)
                    (+ (cadr args) (cadr (cdr args)))

                    (if (eq? (car args) '-)
                        (- (cadr args) (cadr (cdr args)))

                        (if (eq? (car args) '*)
                            (* (cadr args) (cadr (cdr args)))

                            (if (eq? (car args) '/)
                                (/ (cadr args) (cadr (cdr args)))

                                (if (eq? (car args) '<)
                                    (< (cadr args) (cadr (cdr args)))

                                    (apply(eval(car(args))))
                                )     
                            )               
                        )
                    ) 
                )


                (if (cell? (car args))
                    (if (eq? (car args) 'lambda)
                        (println 'lambdaIS)
                        (println 'notLmabda)
                    )
                    (println 'ApplyCellError)
                )
            )
        )
    )
)

;(apply '(1 3 4))
;(apply '(+ 2 3))
;(apply '(- 3 2))
;(apply '(* 2 3))
;(apply '(/ 4 2))
;(apply '(< 2 4))
;(apply '('(a d) 2 3))

(print 'eval)
(define eval (lambda (args)
        (if (integer? args)
            args
            
            (if (symbol? args)
                args

                (if (cell? args)
                    (if (eq? (car args) 'if)
                        (if (cadr args)
                            (cadr (cdr args))
                            (cadr (cdr (cdr args)))
                        ) 

                        (if (eq? (car args) 'define)
                            (define (car (cdr args)) (car (cdr (cdr args))))

                            (if (eq? (car args) 'while)
                                (while (cadr args) (cadr (car args)))

                                (apply args)
                            )
                        )
                    )

                    'nil
                )
            )
        )
    )
)

(eval '123)
(eval 'asdf)
(eval '(if (< 2 3) 1 2))
(eval '(if (< 3 2) 1 2))

(eval '(define d 10))
(println d)
;(println 'hello)


;(evlist (list a b c))


;; ///////////////////////////////////////////////////// 
;; envを付け加える前のコード　10:50

(define a 10)
(define b 11)
(define c 12)


(print 'cadr)
(define cadr (lambda (obj)
        (car (cdr obj))
    )
)


(print 'pairlist)
(define pairlist (lambda (names values tail)
        (if (cell? names)
            (cons (cons (car names) (car values)) (pairlist (cdr names) (cdr values) tail))
            tail
        )
    )
)

(print 'evlist)
(define evlist (lambda (list)
        (if (cell? list)
        (cons (eval (car list)) (evlist (cdr list)))
        (eval list)
        )
    )
)

(print 'apply)
(define apply (lambda (args)
        (if (integer? (car args))
            (println 'ApplyIntegerError)

            (if (symbol? (car args))
                (if (eq? (car args) '+)
                    (+ (cadr args) (cadr (cdr args)))

                    (if (eq? (car args) '-)
                        (- (cadr args) (cadr (cdr args)))

                        (if (eq? (car args) '*)
                            (* (cadr args) (cadr (cdr args)))

                            (if (eq? (car args) '/)
                                (/ (cadr args) (cadr (cdr args)))

                                (if (eq? (car args) '<)
                                    (< (cadr args) (cadr (cdr args)))

                                    (apply(eval(car(args))))
                                )     
                            )               
                        )
                    ) 
                )


                (if (cell? (car args))
                    (if (eq? (car args) 'lambda)
                        (lambda (cadr args) (cadr (cdr args)))
                        
                        (println 'ApplyCellError)
                    )

                    (println 'ApplyError)
                )
            )
        )
    )
)


(print 'eval)
(define eval (lambda (args)
        (if (integer? args)
            'integer
            
            (if (symbol? args)
                args

                (if (cell? args)
                    (if (eq? (car args) 'if)
                        (if (eval (cadr args))
                            (cadr (cadr (cdr args)))
                            (cadr (cadr (cdr (cdr args))))
                        ) 

                        (if (eq? (car args) 'define)
                            (eval (define (car (cdr args)) (car (cdr (cdr args)))))

                            (if (eq? (car args) 'while)
                                (while (cadr args) (cadr (car args)))

                                (apply args)
                            )
                        )
                    )

                    (println 'EvalError)
                )
            )
        )
    )
)
(println 'Start)

(eval '123);;integer error
(eval 'asdf);;asdf
(eval '(if (< 2 3) 't 'f));;t
(eval '(if (< 3 2) 't 'f));;f
(evlist (list a b c))
(pairlist '(a b c) '(1 2 3) '(3 4 5))

(println 'ReachTheEnd)