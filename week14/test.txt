;;;; GRCP-14 cond & let 2023.05.16
(println 'GRCP14)
;;;; [ cond ]
    (define list (lambda args args))
    (list 1 2 3)
    ;; (define make-cond (lambda (clause rest)
    ;;                 (if (list? clause) 
    ;;                     (list 'if (car clause) 
    ;;                             (car (cdr clause))
    ;;                             (make-cond (car rest) (cdr rest))
    ;;                             )
    ;;                 )
    ;;     )
    ;; ) 
    ;;     (make-cond '(1 2) '((3 4 )(5 6)))    

    ;; (define-syntax cond (lambda (. args)

    ;;                 (make-cond (car args) (cdr args))))


    ;; (define test (lambda (x)
    ;;         (cond 
    ;;             ((= x 1) 'one)
    ;;             ((= x 2) 'two)
    ;;             ((= x 3) 'three)
    ;;             (1       'unkown)
    ;;         )
    ;; )
    ;; )
    ;;     (test 1)
    ;;     (test 2)
    ;;     (test 3)
    ;;     (test 4)


;;;; [ let ]

    (define para (lambda (args)
            (if (list? args)
                (cons (car (car args)) (para (cdr args)))
            )
        )
    )

    (define valu (lambda (args)
            (if (list? args)
                (cons (car (cdr (car args)))  (valu (cdr args)))
            )
        )
    )

        (para '((a 2) (b 3) (c 4) (d 5)))
        (valu '((a 2) (b 3) (c 4) (d 5)))

    (define make-let (lambda (clause . exp)
            (cons (cons 'lambda (cons (para clause) exp)) (valu clause))
        )
    ) 

    (make-let '((a 6) (b 3) (c 4)) '(* a (+ b c)) '(+ a b))

    (define-syntax let (lambda (let . args)
                    (make-let (car args) (car (cdr args)))))

        ( (lambda (a b c)
            (* a (+  b c)))
        6 3 4)

    (define test2 (lambda () 
        (let ((a 6) (b 3) (c 4))
        (* a (+ b c)))
    ))
        (test2)

;;;;
(println 'END_OF_THE_FILE)
stop
